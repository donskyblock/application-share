name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
        node-version: [16, 18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y x11-utils xdotool imagemagick xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Install Node.js dependencies
      run: |
        cd client
        npm install
        cd ..

    - name: Build frontend
      run: |
        cd client
        npm run build
        cd ..

    - name: Run Python tests
      run: |
        pytest tests/ -v --cov=server --cov-report=xml

    - name: Run Node.js tests
      run: |
        cd client
        npm test
        cd ..

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Install Node.js dependencies
      run: |
        cd client
        npm install
        cd ..

    - name: Lint Python code
      run: |
        flake8 server/ main.py
        black --check server/ main.py
        isort --check-only server/ main.py
        mypy server/ main.py

    - name: Lint Node.js code
      run: |
        cd client
        npm run lint
        cd ..

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: safety check

    - name: Run bandit security check
      run: bandit -r server/ main.py

  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t application-share:test .

    - name: Test Docker image
      run: |
        docker run --rm application-share:test python -c "import main; print('Docker image works!')"

  build-docs:
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material

    - name: Build documentation
      run: |
        mkdocs build --clean --site-dir ./site

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: ./site
